on:
  workflow_call:
    secrets:
      DOCKERHUB_USERNAME:
        required: true
      DOCKERHUB_TOKEN:
        required: true
      DEPLOYER_EMAIL:
        required: true
      DEPLOYER_USERNAME:
        required: true
      DEPLOYER_GITHUB_TOKEN:
        required: true

    inputs:
      push-image:
        description: Pushes built image to dockerhub when set to true.
        required: false
        type: boolean
        default: false
      skip-deploy:
        description: Prevents modifications to apps-infrastructure when set to true. Primarily for testing.
        required: false
        type: boolean
        default: false
      dockerfile:
        description: Path to the Dockerfile
        required: true
        type: string
      tags:
        description: List of tags for the image (must be all lowercase). These will override the default tags.
        required: false
        type: string
      environment:
        description: The target environment to build and deploy image
        required: true
        default: dev
        type: string

jobs:
  build-image:
    name: Build
    runs-on: ubuntu-latest
    env:
      IMAGE_TAGS: ${{ inputs.tags }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: artifact
          path: ~/
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Short SHA
        if: inputs.push-image && env.IMAGE_TAGS == ''
        run: |
          echo "SHORT_SHA=$(git rev-parse --short HEAD)-${{inputs.environment}}" >> $GITHUB_ENV
      - name: Generate Image Tags
        # Do not overwrite tags if set already from input
        if: inputs.push-image && env.IMAGE_TAGS == ''
        # We're pushing an image and no tags supplied, so create defaults
        run: |
          echo "IMAGE_TAGS<<EOF" >> $GITHUB_ENV
          echo "${{github.repository}}:${{env.SHORT_SHA}}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          install: true

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Info
        run: |
          echo "Push Image: ${{inputs.push-image}}"
          echo "Tags: ${{env.IMAGE_TAGS}}"
      - name: Build image and push to Docker Hub
        id: docker_build
        uses: docker/build-push-action@v3
        with:
          context: /home/runner/
          file: ${{ inputs.dockerfile }}
          tags: ${{ env.IMAGE_TAGS }}
          push: ${{ inputs.push-image }}
          ssh: default
      - name: Image digest
        run: echo "::notice ::Image digest ${{ steps.docker_build.outputs.digest }}"

      - name: Checkout Chart
        if: inputs.push-image && !inputs.skip-deploy
        uses: actions/checkout@v3
        with:
          repository: "toggleglobal/apps-infrastructure"
          token: ${{ secrets.DEPLOYER_GITHUB_TOKEN }}
          path: apps-infrastructure

      - name: Setup git
        if: inputs.push-image && !inputs.skip-deploy
        run: |
          git config --global user.email "${{ secrets.DEPLOYER_EMAIL }}"
          git config --global user.name "${{ secrets.DEPLOYER_USERNAME }}"
      - name: Update image tag
        if: inputs.push-image && !inputs.skip-deploy
        run: |
          cd apps-infrastructure
          CHART_VALUES_PATH="./charts/${{ github.event.repository.name }}/values"
          printf "common:\n  image:\n    tag: \"${{env.SHORT_SHA}}\"\n" > "${CHART_VALUES_PATH}/image-${{inputs.environment}}.yaml"
      - name: Commit new image
        if: inputs.push-image && !inputs.skip-deploy
        run: |
          cd apps-infrastructure
          git add .
          if git status | grep -q "Changes to be committed"
          then
            if [[ ${{inputs.environment}} == "prod" ]]; then
              BRANCH_NAME="${{ github.event.repository.name }}-${GITHUB_RUN_ID}"
              git checkout -b ${BRANCH_NAME}
              git commit --message "Promote to ${{inputs.environment}} from ${{ github.event.repository.name }}"
              echo "Pushing git commit"
              git push -u origin ${BRANCH_NAME}
              echo "Creating a pull request"
              gh pr create -t "Promote to ${{inputs.environment}} ${{ github.event.repository.name }}" -B "main" -b "Promote to production ${{ github.event.repository.name }}" -H ${BRANCH_NAME}
            else
              git commit --message "Update ${{ inputs.environment }} env image ${{ github.event.repository.name }}"
              echo "Pushing git commit"
              git push -u origin main
            fi
          else
            echo "No changes detected"
          fi

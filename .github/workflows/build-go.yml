on:
  workflow_call:
    secrets:
      SLACK_BOT_TOKEN:
        required: true
      GO_PRIVATE_REPO_KEY:
        required: true
    inputs:
      coverage-threshold:
        description: Minimum percentage of code covered by tests for build to pass
        type: number
        required: false
        default: 75.0
      golang-version:
        description: Version of golang used to build application
        required: false
        type: string
      requires-postgres:
        type: boolean
        required: false
      requires-cassandra:
        type: boolean
        required: false
      requires-redis:
        type: boolean
        required: false
      requires-vault:
        type: boolean
        required: false
      requires-clickhouse:
        type: boolean
        required: false
      requires-manticore:
        type: boolean
        required: false
      requires-nats:
        type: boolean
        required: false
      skip-format-check:
        description: Prevents verification of go file formatting with goimports when set to true. Required until https://github.com/golang/go/issues/42965 is resolved.
        required: false
        type: boolean
        default: false

jobs:
  required:
    name: Compile Services Configuration
    env:
      POSTGRES: >-
        "postgres": {
        "image": "postgres:16.2",
        "env": {
        "POSTGRES_DB": "postgres",
        "POSTGRES_USER": "postgres",
        "POSTGRES_PASSWORD": "postgres",
        "POSTGRES_PORT": 5432},
        "ports": ["5432:5432"],
        "options": "--health-cmd pg_isready --health-interval 10s --health-timeout 10s --health-retries 10"
        }
      CASSANDRA: >-
        "cassandra": {
        "image": "cassandra:4.1.4",
        "env": {
        "CASSANDRA_CLUSTER_NAME": "cassandracluster",
        "JVM_OPTS": "-Xms512M -Xmx512M",
        "MAX_HEAP_SIZE": "512M",
        "HEAP_NEWSIZE": "128M"},
        "ports":["9042:9042"],
        "options": "--health-cmd \"cqlsh --debug\" --health-interval 10s --health-timeout 10s --health-retries 10"
        }
      REDIS: >-
        "redis": {
        "image": "redis:7.2.3",
        "ports":["6379:6379"],
        "options": "--health-cmd \"redis-cli ping\" --health-interval 10s --health-timeout 5s --health-retries 5"
        }
      VAULT: >-
        "vault": {
        "image": "vault:1.13.3",
        "env": {
        "VAULT_ADDR": "http://0.0.0.0:8200",
        "VAULT_DEV_ROOT_TOKEN_ID": "vault-root-token"},
        "ports":["8200:8200"],
        "options": "--health-cmd \"vault version\" --health-interval 10s --health-timeout 5s --health-retries 5"
        }
      CLICKHOUSE: >-
        "clickhouse": {
        "image": "toggleglobal/clickhouse-server:22.3",
        "ports":["9000:9000"],
        "options": "--health-cmd \"clickhouse status\" --health-interval 10s --health-timeout 5s --health-retries 5"
        }
      MANTICORE: >-
        "manticore": {
        "image": "manticoresearch/manticore:6.2.12",
        "ports":["9306:9306"],
        "options": "--health-cmd \"searchd --status\" --health-interval 10s --health-timeout 5s --health-retries 5"
        }
      NATS: >-
        "nats": {
        "image": "nats:alpine",
        "ports":["4222:4222"],
        "command": ["--js", "-m", "8222"],
        "options": "--health-cmd 'wget http://localhost:8222/healthz -q -S -O -' --health-interval 10s --health-timeout 10s --health-retries 10"
        }
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.required.outputs.services }}
    steps:
      - name: Requires Postgres
        if: inputs.requires-postgres
        run: |
          if [[ -z '${{ env.SERVICES }}' ]]; then
            echo 'SERVICES=${{env.SERVICES}}${{env.POSTGRES}}' >> $GITHUB_ENV
          else
            echo 'SERVICES=${{env.SERVICES}},${{env.POSTGRES}}' >> $GITHUB_ENV
          fi
      - name: Requires Cassandra
        if: inputs.requires-cassandra
        run: |
          if [[ -z '${{ env.SERVICES }}' ]]; then
            echo 'SERVICES=${{env.SERVICES}}${{env.CASSANDRA}}' >> $GITHUB_ENV
          else
            echo 'SERVICES=${{env.SERVICES}},${{env.CASSANDRA}}' >> $GITHUB_ENV
          fi
      - name: Requires Redis
        if: inputs.requires-redis
        run: |
          if [[ -z '${{ env.SERVICES }}' ]]; then
            echo 'SERVICES=${{env.SERVICES}}${{env.REDIS}}' >> $GITHUB_ENV
          else
            echo 'SERVICES=${{env.SERVICES}},${{env.REDIS}}' >> $GITHUB_ENV
          fi
      - name: Requires Vault
        if: inputs.requires-vault
        run: |
          if [[ -z '${{ env.SERVICES }}' ]]; then
            echo 'SERVICES=${{env.SERVICES}}${{env.VAULT}}' >> $GITHUB_ENV
          else
            echo 'SERVICES=${{env.SERVICES}},${{env.VAULT}}' >> $GITHUB_ENV
          fi
      - name: Requires ClickHouse
        if: inputs.requires-clickhouse
        run: |
          if [[ -z '${{ env.SERVICES }}' ]]; then
            echo 'SERVICES=${{env.SERVICES}}${{env.CLICKHOUSE}}' >> $GITHUB_ENV
          else
            echo 'SERVICES=${{env.SERVICES}},${{env.CLICKHOUSE}}' >> $GITHUB_ENV
          fi
      - name: Requires Manticore
        if: inputs.requires-manticore
        run: |
          if [[ -z '${{ env.SERVICES }}' ]]; then
            echo 'SERVICES=${{env.SERVICES}}${{env.MANTICORE}}' >> $GITHUB_ENV
          else
            echo 'SERVICES=${{env.SERVICES}},${{env.MANTICORE}}' >> $GITHUB_ENV
          fi
      - name: Requires NATS
        if: inputs.requires-nats
        run: |
          if [[ -z '${{ env.SERVICES }}' ]]; then
            echo 'SERVICES=${{env.SERVICES}}${{env.NATS}}' >> $GITHUB_ENV
          else
            echo 'SERVICES=${{env.SERVICES}},${{env.NATS}}' >> $GITHUB_ENV
          fi
      - id: required
        run: |
          echo services='{${{env.SERVICES}}}' >> $GITHUB_OUTPUT

      - name: display string
        run: |
          echo "::notice ::Requires Postgres: ${{ inputs.requires-postgres }}"
          echo "::notice ::Requires Cassandra: ${{ inputs.requires-cassandra }}"
          echo "::notice ::Requires Redis: ${{ inputs.requires-redis }}"
          echo "::notice ::Requires Vault: ${{ inputs.requires-vault }}"
          echo "::notice ::Requires ClickHouse: ${{ inputs.requires-clickhouse }}"
          echo "::notice ::Requires Manticore: ${{ inputs.requires-manticore }}"
          echo "::notice ::Requires NATS: ${{ inputs.requires-nats }}"

  build:
    name: Build & Test
    runs-on: ubuntu-latest
    needs: required
    services: ${{fromJSON(needs.required.outputs.services)}}
    env:
      POSTGRES_CONN_URI: "postgres://localhost:5432/postgres?user=postgres&password=postgres&sslmode=disable"
      POSTGRES_MIGRATIONS: ../../db/migrations/postgres
      CASSANDRA_CLUSTER_HOSTS: localhost
      CASSANDRA_PORT: 9042
      CASSANDRA_KEYSPACE: svc_test
      CASSANDRA_MIGRATIONS: ../../db/migrations/cassandra
      CASSANDRA_PASSWORD: cassandra
      CASSANDRA_USER: cassandra
      REDIS_HOST: localhost
      REDIS_PORT: 6379
      VAULT_ADDR: http://127.0.0.1:8200
      VAULT_DEV_TOKEN_ID: vault-root-token
      CLICKHOUSE_CONN_URI: "clickhouse://localhost:9000/default?username=default"
      CLICKHOUSE_MIGRATIONS: ../../db/migrations/clickhouse
      MANTICORE_CONN_URI: "mysql://localhost:9306/test"
      MANTICORE_MIGRATIONS: ../../db/migrations/manticore
      GOLANG_VERSION: ${{ inputs.golang-version }}
      GOPRIVATE: github.com/toggleglobal/*
      SSH_AUTH_SOCK: /tmp/ssh_agent.sock
      LOCALAZY_READ_KEY: ${{ secrets.LOCALAZY_READ_KEY }}
      LOCALAZY_WRITE_KEY: ${{ secrets.LOCALAZY_WRITE_KEY }}
      NATS_BROKERS: localhost:4222
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Checkout Config
      # Checkout workflow repo to gain access to config file
      uses: actions/checkout@v4
      with:
        repository: toggleglobal/workflows
        path: './tmp'
        ref: main

    - name: Set Default Golang Build Version
      if: env.GOLANG_VERSION == ''
      run: |
        echo "GOLANG_VERSION=$(yq -r '.golang.build.version' ./tmp/config.yml)" >> $GITHUB_ENV

    - name: Set StaticCheck Config
      run: |
        echo "STATICCHECK_VERSION=$(yq -r '.staticcheck.version' ./tmp/config.yml)" >> $GITHUB_ENV
        echo "STATICCHECK_CHECKS=$(yq -r '.staticcheck.checks' ./tmp/config.yml)" >> $GITHUB_ENV

    - name: Setup SSH and git
      run: |
        mkdir -p -m 0700 "$HOME/.ssh"
        ssh-keyscan -H github.com >> $HOME/.ssh/known_hosts
        ssh-agent -a $SSH_AUTH_SOCK > /dev/null
        ssh-add - <<< "${{ secrets.GO_PRIVATE_REPO_KEY }}"
        git config --global url."git@github.com:toggleglobal".insteadOf https://github.com/toggleglobal

    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GOLANG_VERSION }}
        check-latest: false

    - name: Install wire
      run: go install github.com/google/wire/cmd/wire@latest

    - name: Check Wire
      run: |
        find . -type f -name "wire.go" -execdir wire \;
        if git status --porcelain | grep -q "wire_gen.go"
        then
          echo "wire_gen.go is out of date; run wire locally then push your branch again."
          exit 1
        fi

    - name: Install goimports
      if: ${{ inputs.skip-format-check == false }}
      run: go install golang.org/x/tools/cmd/goimports@latest

    - name: Verify formatting
      if: ${{ inputs.skip-format-check == false }}
      run: |
        ISSUES=$(goimports -l -e . 2>&1)
        has_issues=false
        while read -r issue; do
          if [[ -n "$issue" ]]; then
            if [[ ! $issue =~ ^\.templates/ ]]; then
              if [[ ! $issue =~ (_gen|_enumer|\.pb)\.go$ ]]; then
                echo "$issue"
                has_issues=true
              fi
            fi
          fi
        done <<< "$ISSUES"
        if [ "$has_issues" = true ]; then
          echo "One or more files appeared to be malformatted; run goimports locally then push your branch again."
          exit 1
        fi
        exit 0

    - name: Verify dependencies
      run: go mod verify

    - name: Run go vet
      run: go vet ./...

    - name: Install staticcheck
      run: go install honnef.co/go/tools/cmd/staticcheck@${{ env.STATICCHECK_VERSION }}

    - name: Run staticcheck
      run: staticcheck -checks "${{ env.STATICCHECK_CHECKS }}" ./...

    - name: Extract source strings
      if: env.LOCALAZY_READ_KEY != '' && env.LOCALAZY_WRITE_KEY != ''
      run: |
        go install github.com/toggleglobal/germ-i18n-extract@latest &&
        germ-i18n-extract -out ./locales .

    - name: Upload source strings to Localazy
      if: env.LOCALAZY_READ_KEY != '' && env.LOCALAZY_WRITE_KEY != ''
      uses: localazy/upload@v1
      with:
        config_file: './tmp/localazy.go.json'
        read_key: ${{ env.LOCALAZY_READ_KEY }}
        write_key: ${{ env.LOCALAZY_WRITE_KEY }}

    - name: Download translations from Localazy
      if: env.LOCALAZY_READ_KEY != ''
      uses: localazy/download@v1
      with:
        config_file: './tmp/localazy.go.json'
        read_key: ${{ env.LOCALAZY_READ_KEY }}

    - name: Install gotestsum
      run: go install gotest.tools/gotestsum@latest

    - name: Run tests
      run: gotestsum --no-color=false -- -race -coverprofile=cover.out -covermode=atomic -vet=off ./...

    - name: Test Coverage
      run: |
        go tool cover -func=cover.out

on:
  workflow_call:
    secrets:
      DOCKERHUB_USERNAME:
        required: true
      DOCKERHUB_TOKEN:
        required: true
      DEPLOYER_EMAIL:
        required: true
      DEPLOYER_USERNAME:
        required: true
      DEPLOYER_GITHUB_TOKEN:
        required: true
    inputs:
      push-image:
        description: Pushes built image to dockerhub when set to true.
        required: false
        type: boolean
        default: false
      skip-deploy:
        description: Prevents modifications to apps-infrastructure when set to true. Primarily for testing.
        required: false
        type: boolean
        default: false
      dockerfile:
        description: Path to the Dockerfile
        required: true
        type: string
      next-public-ga:
        description: Next public ga
        required: true
        type: string
      next-public-naver:
        description: Next public naver
        required: true
        type: string
      next-public-domain:
        description: Next public domain
        required: true
        type: string
      next-public-cookie-pro:
        description: Next public cookie pro
        required: true
        type: string
      environment:
        description: The target environment to build and deploy image
        required: true
        default: dev
        type: string
      cdn-path:
        description: Path where stored static files in CDN
        default: website
        type: string
    outputs:
      image-tag:
        value: ${{ jobs.build-image.outputs.image-tag }}
      image:
        value: ${{ jobs.build-image.outputs.image }}

jobs:
  build-image:
    name: Build
    runs-on: ubuntu-latest
    env:
      SSH_AUTH_SOCK: /tmp/ssh_agent.sock
      NEXT_PUBLIC_GA: ${{ inputs.next-public-ga }}
      NEXT_PUBLIC_NAVER: ${{  inputs.next-public-naver }}
      NEXT_PUBLIC_DOMAIN: ${{ inputs.next-public-domain }}
      NEXT_PUBLIC_COOKIE_PRO: ${{ inputs.next-public-cookie-pro }}
    outputs:
      image: ${{ steps.generate-image-tags.outputs.IMAGE }}
      image-tag: ${{ steps.generate-image-tags.outputs.IMAGE_TAG }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      - id: generate-image-tags
        if: inputs.push-image
        run: |
          IMAGE_TAG="$(git rev-parse --short HEAD)-${{ github.run_number }}-${{inputs.environment}}"
          IMAGE="${{github.repository}}:$IMAGE_TAG"
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV
          echo "IMAGE=$IMAGE" >> $GITHUB_OUTPUT
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_OUTPUT
      - name: Setup SSH
        run: |
          mkdir -p -m 0700 "$HOME/.ssh"
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          ssh-add - <<< "${{ secrets.GO_PRIVATE_REPO_KEY }}"
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          install: true
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Info
        run: |
          echo "Push Image: ${{inputs.push-image}}"
          echo "Image: ${{env.IMAGE}}"
      - name: Build image and push to Docker Hub
        id: docker_build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ inputs.dockerfile }}
          tags: ${{ env.IMAGE }}
          push: ${{ inputs.push-image }}
          ssh: default
          build-args: |
            NEXT_PUBLIC_GA=${{ env.NEXT_PUBLIC_GA }}
            NEXT_PUBLIC_NAVER=${{  env.NEXT_PUBLIC_NAVER }}
            NEXT_PUBLIC_DOMAIN=${{ env.NEXT_PUBLIC_DOMAIN }}
            NEXT_PUBLIC_COOKIE_PRO=${{ env.NEXT_PUBLIC_COOKIE_PRO }}
            WEB_SITE_LOCALAZY_READ_KEY=${{ secrets.WEB_SITE_LOCALAZY_READ_KEY }}
            WEB_SITE_LOCALAZY_WRITE_KEY=${{ secrets.WEB_SITE_LOCALAZY_WRITE_KEY }}
            NEXT_VERSION=${{ github.sha }}-${{ github.run_number }}
            CDN_PATH=${{ inputs.cdn-path }}
      - name: Image digest
        run: echo "::notice ::Image digest ${{ steps.docker_build.outputs.digest }}"
      - name: Run Trivy vulnerability scanner
        if: inputs.push-image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE }}
          format: "json"
          output: "trivy-results.json"
          ignore-unfixed: true
          timeout: 10m
        env:
          TRIVY_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          TRIVY_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Upload Trivy Reports
        uses: actions/upload-artifact@v4
        if: inputs.push-image
        with:
          name: Security Report
          path: trivy-results.json
          retention-days: 5
      - name: Checkout Workflows Repo
        if: inputs.push-image
        uses: actions/checkout@v4
        with:
          repository: "toggleglobal/workflows"
          token: ${{ secrets.DEPLOYER_GITHUB_TOKEN }}
          path: workflows
      - name: Run Trivy Parser
        id: trivy-parser
        if: inputs.push-image
        run: ./workflows/.github/workflows/scripts/trivyresult_parser.sh trivy-results.json
        shell: bash
      - name: Fail with Critical
        if: inputs.push-image && steps.trivy-parser.outputs.stdout == 1
        run: exit 1
      - name: Checkout Chart
        if: inputs.push-image && !inputs.skip-deploy
        uses: actions/checkout@v3
        with:
          repository: "toggleglobal/apps-infrastructure"
          token: ${{ secrets.DEPLOYER_GITHUB_TOKEN }}
          path: apps-infrastructure
      - name: Setup git
        if: inputs.push-image && !inputs.skip-deploy
        run: |
          git config --global user.email "${{ secrets.DEPLOYER_EMAIL }}"
          git config --global user.name "${{ secrets.DEPLOYER_USERNAME }}"
      - name: Update image tag
        if: inputs.push-image && !inputs.skip-deploy
        run: |
          cd apps-infrastructure
          CHART_VALUES_PATH="./charts/${{ github.event.repository.name }}/values"
          printf "common:\n  image:\n    tag: \"${{env.IMAGE_TAG}}\"\n" > "${CHART_VALUES_PATH}/toggle-image-${{inputs.environment}}.yaml"
      - name: Commit new image
        env:
          GH_TOKEN: ${{ secrets.DEPLOYER_GITHUB_TOKEN }}
        if: inputs.push-image && !inputs.skip-deploy
        run: |
          cd apps-infrastructure
          git add .
          if git status | grep -q "Changes to be committed"
          then
            if [[ ${{inputs.environment}} == "prod" ]]; then
              BRANCH_NAME="${{ github.event.repository.name }}-${GITHUB_RUN_ID}"
              git checkout -b ${BRANCH_NAME}
              git commit --message "Promote to ${{inputs.environment}} from ${{ github.event.repository.name }}"
              echo "Pushing git commit"
              git push -u origin ${BRANCH_NAME}
              echo "Creating a pull request"
              gh pr create -t "Promote to ${{inputs.environment}} ${{ github.event.repository.name }}" -B "main" -b "Promote to production ${{ github.event.repository.name }}" -H ${BRANCH_NAME}
            else
              git commit --message "Update ${{ inputs.environment }} env image ${{ github.event.repository.name }}"
              echo "Pushing git commit"
              git push -u origin main
            fi
          else
            echo "No changes detected"
          fi

on:
  workflow_call:
    secrets:
      # GO_PRIVATE_REPO_KEY is the only secret required for all situations.
      # The others are only used when 'push-image' input is true; where the
      # image is actually pushed to Dockerhub and the Infrastructure Chart
      # is updated with latest tag.
      GO_PRIVATE_REPO_KEY:
        required: true
      DOCKERHUB_USERNAME:
        required: false
      DOCKERHUB_TOKEN:
        required: false
      DEPLOYER_EMAIL:
        required: false
      DEPLOYER_USERNAME:
        required: false
      DEPLOYER_GITHUB_TOKEN:
        required: false

    inputs:
      push-image:
        description: Pushes built image to dockerhub when set to true.
        required: false
        type: boolean
        default: false
      skip-deploy:
        description: Prevents modifications to apps-infrastructure when set to true. Primarily for testing.
        required: false
        type: boolean
        default: false
      dockerfile:
        description: Path to the Dockerfile
        required: true
        type: string
      tags:
        description: List of tags for the image (must be all lowercase). These will override the default tags.
        required: false
        type: string
      repository-suffix:
        description: >
          Adds a hyphen separated suffix to the repository name used to create image tags (must be all lowercase).
          This is primarily for use where a repository has more than one Dockerfile. This is ignored if tags has been set.
        required: false
        type: string
      golang-version:
        description: Version of golang used during build if specified as argument in Dockerfile
        required: false
        type: string
      runs-as:
        description: Defines how the built image is expected to be run, e.g service or cronjob.
        default: service
        required: false
        type: string

jobs:
  build-image:
    name: Build
    runs-on: ubuntu-latest
    outputs:
      image-ref: ${{ steps.gen-ref.outputs.IMAGE_REF }}
      short-sha: ${{ steps.short-sha.outputs.SHORT_SHA }}
    env:
      SSH_AUTH_SOCK: /tmp/ssh_agent.sock
      IMAGE_TAGS: ${{ inputs.tags }}
      GOLANG_VERSION: ${{ inputs.golang-version }}
      REPOSITORY_SUFFIX: ${{ inputs.repository-suffix }}
      LOCALAZY_READ_KEY: ${{ secrets.LOCALAZY_READ_KEY }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Checkout Config
        # Checkout workflow repo to gain access to config files
        uses: actions/checkout@v4
        with:
          repository: toggleglobal/workflows
          path: './tmp'
          ref: main

      - name: Set Default Golang Build Version
        if: env.GOLANG_VERSION == ''
        run: |
          echo "GOLANG_VERSION=$(yq -r '.golang.build.version' ./tmp/config.yml)" >> $GITHUB_ENV

      - name: Short SHA
        id: short-sha
        if: inputs.push-image && env.IMAGE_TAGS == ''
        run: |
          echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          echo "SHORT_SHA=${{git rev-parse --short HEAD}}" >> $GITHUB_OUTPUT

      - name: Repository Suffix
        # Prepend hyphen if set
        if: env.REPOSITORY_SUFFIX != ''
        run: |
          echo "REPOSITORY_SUFFIX=-${{env.REPOSITORY_SUFFIX}}" >> $GITHUB_ENV

      - name: Generate Image Tags
        id: gen-ref
        # Do not overwrite tags if set already from input
        if: inputs.push-image && env.IMAGE_TAGS == ''
        # We're pushing an image and no tags supplied, so create defaults
        run: |
          echo "IMAGE_TAGS<<EOF" >> $GITHUB_ENV
          echo "${{github.repository}}${{env.REPOSITORY_SUFFIX}}:${{env.SHORT_SHA}}" >> $GITHUB_ENV
          echo "${{github.repository}}${{env.REPOSITORY_SUFFIX}}:${{github.ref_name}}-latest" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          echo "IMAGE_REF=${{github.repository}}${{env.REPOSITORY_SUFFIX}}:${{env.SHORT_SHA}}" >> $GITHUB_OUTPUT
          
      - name: Setup SSH
        run: |
          mkdir -p -m 0700 "$HOME/.ssh"
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          ssh-add - <<< "${{ secrets.GO_PRIVATE_REPO_KEY }}"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Login to DockerHub
        if: inputs.push-image
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Info
        run: |
          echo "Push Image: ${{inputs.push-image}}"
          echo "Tags: ${{env.IMAGE_TAGS}}"
          echo "Golang Version: ${{env.GOLANG_VERSION}}}"

      - name: Download translations from Localazy
        if: env.LOCALAZY_READ_KEY != ''
        uses: localazy/download@v1
        with:
          config_file: './tmp/localazy.go.json'
          read_key: ${{ env.LOCALAZY_READ_KEY }}

      - name: Build image and push to Docker Hub
        id: docker_build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ inputs.dockerfile }}
          tags: ${{ env.IMAGE_TAGS }}
          push: ${{ inputs.push-image }}
          ssh: default
          build-args: |
            GOLANG_VERSION=${{ env.GOLANG_VERSION }}

      - name: Image digest
        run: echo "::notice ::Image digest ${{ steps.docker_build.outputs.digest }}"


  scan-image:
    needs: [ build-image ]
    if: inputs.push-image
    secrets: inherit
    uses: toggleglobal/workflows/.github/workflows/vulnerability-scanner.yml@main
    with:
      image: ${{ needs.build-image.outputs.image-ref }}

  update-app-chart:
    needs: [ build-image, scan-image ]
    if: inputs.push-image && !inputs.skip-deploy
    secrets: inherit
    uses: toggleglobal/workflows/.github/workflows/update-app-chart.yml@main
    with:
      runs-as: inputs.runs-as
      short-sha: ${{ needs.build-image.outputs.short-sha }} 
on:
  workflow_call:
    secrets:
      DOCKERHUB_USERNAME:
        required: true
      DOCKERHUB_TOKEN:
        required: true
      GO_PRIVATE_REPO_KEY:
        required: true
      DEPLOYER_EMAIL:
        required: true
      DEPLOYER_USERNAME:
        required: true
      DEPLOYER_GITHUB_TOKEN:
        required: true

    inputs:
      push-image:
        description: Pushes built image to dockerhub when set to true.
        required: false
        type: boolean
        default: false
      skip-deploy:
        description: Prevents modifications to apps-infrastructure when set to true. Primarily for testing.
        required: false
        type: boolean
        default: false
      dockerfile:
        description: Path to the Dockerfile
        required: true
        type: string
      tags:
        description: List of tags for the image (must be all lowercase). These will override the default tags.
        required: false
        type: string
      repository-suffix:
        description: >
          Adds a hyphen separated suffix to the repository name used to create image tags (must be all lowercase).
          This is primarily for use where a repository has more than one Dockerfile. This is ignored if tags has been set.
        required: false
        type: string
      golang-version:
        description: Version of golang used during build if specified as argument in Dockerfile
        required: false
        type: string
      runs-as:
        description: Defines how the built image is expected to be run, e.g service or cronjob.
        default: service
        required: false
        type: string

jobs:
  build-image:
    name: Build
    runs-on: ubuntu-latest
    env:
      SSH_AUTH_SOCK: /tmp/ssh_agent.sock
      IMAGE_TAGS: ${{ inputs.tags }}
      GOLANG_VERSION: ${{ inputs.golang-version }}
      REPOSITORY_SUFFIX: ${{ inputs.repository-suffix }}
      LOCALAZY_READ_KEY: ${{ secrets.LOCALAZY_READ_KEY }}
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Checkout Config
      # Checkout workflow repo to gain access to config files
      uses: actions/checkout@v3
      with:
        repository: toggleglobal/workflows
        path: './tmp'
        ref: main

    - name: Set Default Golang Build Version
      if: env.GOLANG_VERSION == ''
      run: |
        echo "GOLANG_VERSION=$(yq -r '.golang.build.version' ./tmp/config.yml)" >> $GITHUB_ENV

    - name: Short SHA
      if: inputs.push-image && env.IMAGE_TAGS == ''
      run: |
        echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

    - name: Repository Suffix
      # Prepend hyphen if set
      if: env.REPOSITORY_SUFFIX != ''
      run: |
        echo "REPOSITORY_SUFFIX=-${{env.REPOSITORY_SUFFIX}}" >> $GITHUB_ENV

    - name: Generate Image Tags
      # Do not overwrite tags if set already from input
      if: inputs.push-image && env.IMAGE_TAGS == ''
      # We're pushing an image and no tags supplied, so create defaults
      run: |
        echo "IMAGE_TAGS<<EOF" >> $GITHUB_ENV
        echo "${{github.repository}}${{env.REPOSITORY_SUFFIX}}:${{env.SHORT_SHA}}" >> $GITHUB_ENV
        echo "${{github.repository}}${{env.REPOSITORY_SUFFIX}}:${{github.ref_name}}-latest" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    - name: Setup SSH
      run: |
        mkdir -p -m 0700 "$HOME/.ssh"
        ssh-agent -a $SSH_AUTH_SOCK > /dev/null
        ssh-add - <<< "${{ secrets.GO_PRIVATE_REPO_KEY }}"

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      with:
        install: true

    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Info
      run: |
        echo "Push Image: ${{inputs.push-image}}"
        echo "Tags: ${{env.IMAGE_TAGS}}"
        echo "Golang Version: ${{env.GOLANG_VERSION}}}"

    - name: Download translations from Localazy
      if: env.LOCALAZY_READ_KEY != ''
      uses: localazy/download@v1
      with:
        config_file: './tmp/localazy.go.json'
        read_key: ${{ env.LOCALAZY_READ_KEY }}

    - name: Build image and push to Docker Hub
      id: docker_build
      uses: docker/build-push-action@v3
      with:
        context: .
        file: ${{ inputs.dockerfile }}
        tags: ${{ env.IMAGE_TAGS }}
        push: ${{ inputs.push-image }}
        ssh: default
        build-args: |
          GOLANG_VERSION=${{ env.GOLANG_VERSION }}

    - name: Image digest
      run: echo "::notice ::Image digest ${{ steps.docker_build.outputs.digest }}"

    - name: Run Trivy vulnerability scanner
      if: inputs.push-image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{github.repository}}${{env.REPOSITORY_SUFFIX}}:${{env.SHORT_SHA}}
        format: 'json'
        output: 'trivy-results.json'
        ignore-unfixed: true
      env:
        TRIVY_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        TRIVY_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Trivy Reports
      uses: actions/upload-artifact@v3
      if: inputs.push-image
      with:
        name: Security Report
        path: trivy-results.json
        retention-days: 5

    - name: Checkout Workflows
      if: inputs.push-image
      uses: actions/checkout@v3
      with:
        repository: "toggleglobal/workflows"
        token: ${{ secrets.DEPLOYER_GITHUB_TOKEN }}
        path: workflows
        ref: 'add-trivy-result-as-pr-comment'

    - name: Run Trivy Parser
      id: trivy-parser
      if: inputs.push-image
      run: ./workflows/.github/workflows/scripts/trivyresult_parser.sh trivy-results.json
      shell: bash

    - name: Check path 2
      if: inputs.push-image
      run: |
        pwd
        ls -alh
        echo ${{ steps.trivy-parser.outputs.stdout }}  

    # - name: comment PR with Trivy Results
    #   if: inputs.push-image
    #   uses: machine-learning-apps/pr-comment@master
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.DEPLOYER_GITHUB_TOKEN }}
    #   with:
    #     path: formattedTrivy.txt

    # - name: Check Critical Severity
    #   if: steps.trivy-parser == 'true'
    #   run: exit 1

    - name: Checkout Chart
      if: inputs.push-image && !inputs.skip-deploy
      uses: actions/checkout@v3
      with:
        repository: "toggleglobal/apps-infrastructure"
        token: ${{ secrets.DEPLOYER_GITHUB_TOKEN }}
        path: apps-infrastructure

    - name: Setup git
      if: inputs.push-image && !inputs.skip-deploy
      run: |
        git config --global user.email "${{ secrets.DEPLOYER_EMAIL }}"
        git config --global user.name "${{ secrets.DEPLOYER_USERNAME }}"

    - name: Update image tag
      if: inputs.push-image && !inputs.skip-deploy
      run: |
        cd apps-infrastructure
        if [[ ${{inputs.runs-as}} == "cronjob" ]]; then
          CHART_VALUES_PATH="./charts/${{ github.event.repository.name }}${{env.REPOSITORY_SUFFIX}}-cronjob/values"
        else
          CHART_VALUES_PATH="./charts/${{ github.event.repository.name }}${{env.REPOSITORY_SUFFIX}}/values"
        fi
        printf "common:\n  image:\n    tag: \"${{env.SHORT_SHA}}\"\n" > "${CHART_VALUES_PATH}/image-dev.yaml"

    - name: Commit new image
      if: inputs.push-image && !inputs.skip-deploy
      run: |
        cd apps-infrastructure
        git add .
        if git status | grep -q "Changes to be committed"
        then
          git commit --message "Update dev image ${{ github.event.repository.name }}"
          echo "Pushing git commit"
          git push -u origin main
        else
          echo "No changes detected"
        fi

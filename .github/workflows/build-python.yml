on:
  workflow_call:
    inputs:
      python-versions:
        description: Version of python used during testing, like "['3.9', '3.10']"
        required: true
        type: string
      dependency-management:
        description: Do you use pip or poetry to install dependencies, choose 'pip' or 'poetry'
        required: true
        type: string
      use_tox:
        description: Do you use tox to test, choose 'y' or 'n'. if 'y', please create tox.ini in root folder
        required: true
        type: string
      coverage-threshold:
        description: Minimum percentage of code covered by tests for build to pass
        type: number
        required: false
        default: 75.0

jobs:
  build:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python: ${{ fromJson(inputs.python-versions) }}

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python }}
      - name: Install dependencies (Pip)
        if: inputs.dependency-management == 'pip'
        run: |
          python -m pip install --upgrade pip
          pip install coverage flake8 pytest tox
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Install dependencies (Poetry)
        if: inputs.dependency-management == 'poetry'
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          poetry config virtualenvs.create false
          poetry add coverage flake8 pytest tox
          poetry install
      - name: Lint with flake8
        run: |
          flake8 .
      - name: Test with pytest
        if: inputs.use_tox == 'n'
        run: |
          coverage run -m pytest
      - name: Test with tox
        if: inputs.use_tox == 'y'
        run: tox -e py

      - name: Coverage
        run: |
          total=`coverage report | grep TOTAL | grep -o '[0-9][0-9]%'`
          total=${total::-1}
          echo "Total test coverage = $total%"
          if (( $(echo "$total ${{ inputs.coverage-threshold }}" | awk '{print ($1 < $2)}') )); then
            echo "Quality gate failed. Coverage below minimum ${{ inputs.coverage-threshold }}%"
            exit 1
          fi
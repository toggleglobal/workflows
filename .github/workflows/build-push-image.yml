on:
  workflow_call:
    secrets:
      DOCKERHUB_USERNAME:
        required: true
      DOCKERHUB_TOKEN:
        required: true
      GO_PRIVATE_REPO_KEY:
        required: true

    inputs:
      push-image:
        description: Pushes built image to dockerhub when set to true.
        required: false
        type: boolean
        default: false
      dockerfile:
        description: Path to the Dockerfile
        required: true
        type: string
      tags:
        description: List of tags for the image (must be all lowercase). These will override the default tags.
        required: false
        type: string
      golang-version:
        description: Version of golang used during build if specified as argument in Dockerfile
        required: false
        type: string

jobs:
  build-image:
    name: Build
    runs-on: ubuntu-latest
    env:
      SSH_AUTH_SOCK: /tmp/ssh_agent.sock
      IMAGE_TAGS: ${{ inputs.tags }}
      GOLANG_VERSION: ${{ inputs.golang-version }}
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Checkout Config
      if: env.GOLANG_VERSION == ''
      # Checkout workflow repo to gain access to config file
      uses: actions/checkout@v2
      with:
        repository: toggleglobal/workflows
        path: './tmp'
        ref: main

    - name: Set Default Golang Build Version
      if: env.GOLANG_VERSION == ''
      run: |
        echo "GOLANG_VERSION=$(yq -r '.golang.build.version' ./tmp/config.yml)" >> $GITHUB_ENV

    - name: Short SHA
      if: inputs.push-image && env.IMAGE_TAGS == ''
      run: |
        echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

    - name: Generate Image Tags
      # Do not overwrite tags if set already from input
      if: inputs.push-image && env.IMAGE_TAGS == ''
      # We're pushing an image and no tags supplied, so create defaults
      run: |
        echo "IMAGE_TAGS<<EOF" >> $GITHUB_ENV
        echo "${{github.repository}}:${{env.SHORT_SHA}}" >> $GITHUB_ENV
        echo "${{github.repository}}:${{github.ref_name}}-latest" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    - name: Setup SSH
      run: |
        mkdir -p -m 0700 "$HOME/.ssh"
        ssh-agent -a $SSH_AUTH_SOCK > /dev/null
        ssh-add - <<< "${{ secrets.GO_PRIVATE_REPO_KEY }}"

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      with:
        install: true

    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Info
      run: |
        echo "Push Image: ${{inputs.push-image}}"
        echo "Tags: ${{env.IMAGE_TAGS}}"
        echo "Golang Version: ${{env.GOLANG_VERSION}}}"

    - name: Build image and push to Docker Hub
      id: docker_build
      uses: docker/build-push-action@v3
      with:
        context: .
        file: ${{ inputs.dockerfile }}
        tags: ${{ env.IMAGE_TAGS }}
        push: ${{ inputs.push-image }}
        ssh: default
        build-args: |
          GOLANG_VERSION=${{ env.GOLANG_VERSION }}

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{env.IMAGE_TAGS}}
        format: 'sarif'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'
      env:
        TRIVY_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        TRIVY_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Image digest
      run: echo "::notice ::Image digest ${{ steps.docker_build.outputs.digest }}"

